/*
Equirectangular to Equisolid PS (c) 2019 Jacob Maximilian Fober
This work is licensed under the Creative Commons 
Attribution-NonCommercial-NoDerivatives 4.0 International License. 
To view a copy of this license, visit 
http://creativecommons.org/licenses/by-nc-nd/4.0/
For inquiries please contact jakubfober@gmail.com
*/

/*
This shader is meant to be used with Shadron image editor,
available here:
https://www.arteryengine.com/shadron/
*/

// version 1.0.4

#include <multisample>


	  ////////////
	 /// MENU ///
	////////////

#define MSAA 4 // Multisample anti-aliasing (0 or 1 disables MSAA)

parameter int Size = 768 : range(16, 1024);
parameter vec3 Background = vec3(0.5, 0.5, 0.5) : color();
parameter bool Transparency = true;
parameter vec2 Rotation = vec2(0.5, 0.5) : range(0.0, 1.0);


	  /////////////
	 /// INPUT ///
	/////////////

// Source image samlping settings
image equirectangular = input() : filter(linear);


	  /////////////////
	 /// FUNCTIONS ///
	/////////////////

// Generate anti-aliased border mask
glsl float BorderMaskAA(float Radius)
{
	float PixelSize = fwidth(Radius); // Get pixel size in radial coordinates (sharp)
	Radius = smoothstep(1.0+PixelSize, 1.0, Radius); // Generate border bounds
	return Radius; // Return borders mask
}

 // Rotate coordinates
glsl vec3 Rotate(vec3 Coordinates, vec2 Angle)
{
	Angle = Angle - 1.0; // Invert angle

	float AngleX = radians(180.0)*(1.0-Angle.y); // Rotation X angle in radians
	float AngleY = radians(180.0)*(Angle.x * 2.0 - 1.0); // Rotation Y angle in radians

	float SinX = sin(AngleX); // Sine of rotation X angle
	float CosX = cos(AngleX); // Cosine of rotation X angle

	float SinY = sin(AngleY); // Sine of rotation Y angle
	float CosY = cos(AngleY); // Cosine of rotation Y angle

	// Axis X rotation matrix
	mat3 RotX = mat3(
		1.0,   0.0,  0.0, // First column (not row!)
		0.0,  CosX, SinX, // Second column
		0.0, -SinX, CosX  // Third column
	);
/*
	// Axis Y rotation matrix
	mat3 RotY = mat3(
		CosY, 0.0, -SinY, // First column (not row!)
		0.0,  1.0,   0.0, // Second column
		SinY, 0.0,  CosY  // Third column
	);
*/
	// Axis Z rotation matrix
	mat3 RotZ = mat3(
		 CosY, SinY, 0.0, // First column (not row!)
		-SinY, CosY, 0.0, // Second column
		  0.0,  0.0, 1.0  // Third column
	);

	// Rotate coordinates
	Coordinates *= RotX*RotZ;

	return Coordinates;
}

// Convert UV coordinates to polar
glsl vec2 Polar(vec2 Coordinates)
{
	// Center coordinates
	Coordinates = Coordinates * 2.0 - 1.0;
	// Return radius and angle
	return vec2(
		length(Coordinates), // Radius
		atan(-Coordinates.y, -Coordinates.x) / radians(360.0) + 0.5 // Angle
	);
}


	  //////////////
	 /// SHADER ///
	//////////////

glsl vec4 Equirect2Equisolid(vec2 TexCoord)
{
	// Convert UV to polar normalized coordinates
	vec2 PolarCoord = Polar(TexCoord);

	// Convert equisolid to equirectangular normalized coordinates
	vec2 EquirectCoord;
	EquirectCoord.x = PolarCoord.y;
	EquirectCoord.y = asin(PolarCoord.x)/radians(90.0);

	// Get longitude and latitude angle in radians from equirectangular UVs
	float Longitude = EquirectCoord.x * radians(360.0);
	float Latitude = (EquirectCoord.y - 0.5) * radians(180.0);

	// Get cartesian XYZ (normalized on sphere) coordinates from longitude and latitude
	vec3 CartCoord;
	CartCoord.x = cos(Latitude) * cos(Longitude);
	CartCoord.y = cos(Latitude) * sin(Longitude);
	CartCoord.z = sin(Latitude);

	// Rotate coordinates
	CartCoord = Rotate(CartCoord, Rotation);

	// Convert cartesian coordinates to longitude and latitude
	Longitude = atan(CartCoord.x, CartCoord.y);
	Latitude = asin(CartCoord.z);

	// Get equirectangular UV coordinates from longitude and latitude
	EquirectCoord.x = Longitude / radians(360.0);
	EquirectCoord.y = Latitude / radians(180.0) + 0.5;

	// Sample equirectangular panorama
	vec4 SphereImage = texture(equirectangular, EquirectCoord);

	// Generate anti-aliased borders mask
	float Mask = BorderMaskAA(PolarCoord.x);

	// Enable transparency
	if(Transparency) SphereImage.a *= Mask;
	else
	{
		// Paint borders to color
		SphereImage.rgb = mix(Background, SphereImage.rgb, Mask);
		SphereImage.a = 1.0; // Disable transparency
	}

	return SphereImage;
}


	  //////////////
	 /// OUTPUT ///
	//////////////

#if MSAA <= 1
	image matcap = glsl(Equirect2Equisolid, ivec2(Size));
#else
	image matcap = glsl(multisample<Equirect2Equisolid, MSAA>, ivec2(Size));
#endif